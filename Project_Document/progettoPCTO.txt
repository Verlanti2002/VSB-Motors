- Web Server (Apache, Nginx, IIS)
- Application
- Database (Mysql)
- Front-End (HTML, CSS, JavaScript)
- Back-End (Python)
- Framework back-end (Django)
- AWS (Server virtuale su cui installare l'application)
- Docker
- GitHub (per la condivisione del progetto con il team)

Framework: è una serie di librerie già programmate da implementare al proprio progetto per facilitare e velocizzare la scrittura del codice. Forniscono ad esempio delle librerie per l'accesso alle basi di dati, per la creazione di template html.
Esempi:
Python - Django
PHP - Laravel/WordPress (CMS)
Java - Swing
JavaScript - React/Angular/Vue/Node

Librerie/Framework:
- React (in Javascript) -> libreria --> impegnativo e molto utilizzato
- AngularJS -> framework
- Vue.js -> framework --> semplice e molto funzionale
- Node.js -> framework 

Come creare le pagine web:
FrontEnd -> HTML - CSS - JavaScript
Librerie -> Bootstrap
BackEnd -> Python - Java - PHP
Framework -> Django - Swing - Laravel
CMS -> Wordpress

Allora queste saranno le tecnologie software che utilizzeremo:
FrontEnd: HTML, CSS, JavaScript
BackEnd: Python
Framework BackEnd: Django

1 Step: Get Domain and Hosting
2 Step: Install Wordpress + Starter template
3 Step: Integrate Booking functionally
4 Step: Desing and customize all parts of website

Publlicazione del sito:
- Servizio di hosting -> Hostinger
- Acquistare un dominio (sito)

mysite -> Django	
These files are:

The outer mysite/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.
manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.
The inner mysite/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).
mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.
mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.
mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.
mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.
mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.

https://www.youtube.com/watch?v=zIRI-ufADq8
https://www.youtube.com/watch?v=9NIxJj82Zt8
https://www.youtube.com/watch?v=Vg5lwv3WA3M

https://www.ionos.it/digitalguide/server/know-how/tutto-quello-che-ce-da-sapere-sui-web-server/

